@page "/"
@inject ISegmentoService service;
<PageTitle>Segmentos</PageTitle>
@if (Segmentos == null)
{
    <h3>Carregando Segmentos ...</h3>
}
else
{
    <div class="d-flex flex-row justify-content-between my-2">
    <h1>Segmentos</h1>
    <a class="btn btn-primary" href="/AdicionarSegmento"><i class="fa-solid fa-plus"></i> Adicionar</a>
</div>

    <div class="d-flex flex-row w-25 h-75 align-middle my-1">
        <select class="form-select" @onchange="@Changeq">
            <option selected value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
            <option value="0">Todos</option>
        </select>
    </div>
    <div class="row d-flex flex-row">
        <h5 class="w-25 ">Nome</h5>
        <h5 class="w-50 ">Descrição</h5>
        <h5 class="w-25 text-center pe-1">Ações</h5>
    </div>
    @if (Segmentosenviados.Count() > 0)
    {
        <ExibirSegmentos Segmentos="@Segmentosenviados"></ExibirSegmentos>
    }
    <div>
    @for (int i = 1; i <= totalpags; i++)
        {
            int j = i;
            @if (i == actpag)
            {
                <button type="button" class="btn btn-secondary">@i</button>
            }
            else
            {
                <button type="button" class="btn btn-primary" value="@i" @onclick="(() => Changep(j))">@i</button>
            }
        }
    </div>
}

@code {
    public IEnumerable<SegmentoDTO>? Segmentos { get; set; }

    public IEnumerable<SegmentoDTO>? Segmentosfiltrados { get; set; }

    public IEnumerable<SegmentoDTO>? Segmentosenviados { get; set; }


    public int totalsegs { get; set; }
    public int qporpag { get; set; } = 10;
    public int? totalpags { get; set; }
    public int actpag { get; set; } = 1;
    public string filtro { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        Segmentos = await service.GetSegmentos();
        qporpag = 10;
        Filtrar();
        totalsegs = Segmentosfiltrados.Count();
        Calculatepags();
        SelecionarEnviados();
    }

    private void Changeq(ChangeEventArgs e)
    {
        qporpag = int.Parse(e.Value.ToString());
        if (qporpag == 0)
        {
            totalpags = 1;
        }
        else
        {
            Calculatepags();
        }
        actpag = 1;
        SelecionarEnviados();
    }

    private void Changep(int newpag)
    {
        actpag = newpag;
        SelecionarEnviados();
    }

    private void ChangeF(ChangeEventArgs e)
    {
        filtro = e.Value.ToString();
        Filtrar();
        actpag = 1;
    }
    private void Calculatepags()
    {
        var temporary = (double)totalsegs / (double)qporpag;
        totalpags = (int)Math.Ceiling(temporary);
    }


    private void Filtrar()
    {
        if (filtro != "")
        {
            Segmentosfiltrados = Segmentos.Where(p => p.Nome.Contains(filtro));
        }
        Segmentosfiltrados = Segmentos;
    }
    private void SelecionarEnviados()
    {
        if (qporpag == 0)
        {
            Segmentosenviados = Segmentosfiltrados;
        }
        else
        {
            int inpos = (actpag - 1) * qporpag;
            Segmentosenviados = Segmentosfiltrados.Skip(inpos).Take(qporpag);
        }

    }
}


