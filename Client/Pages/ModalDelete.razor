<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Deletar</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>VocÃª tem certeza que quer deletar este elemento? @Id</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal"
                    @onclick="() => Close()">Close</button>
                <button type="button" class="btn btn-danger" @onclick="() => HandleDelete()">Deletar</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {

    [Inject]
    public ISegmentoService? segmentoservice { get; set; }

    [Inject]
    public NavigationManager NavManager { get; set; }

    [Parameter]
    public string? Id { get; set; }
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private async void HandleDelete()
    {
        try
        {
            await segmentoservice.DeletarSegmento(Id);
            NavManager.NavigateTo("/", forceLoad: true);
        }
        catch (System.Exception)
        {

            throw;
        }
    }
}